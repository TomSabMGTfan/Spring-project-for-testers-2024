{
	"info": {
		"_postman_id": "26cbeb6b-b44d-4551-9493-aaba08e22a4e",
		"name": "SpringProject Test2",
		"description": "**!!! PRIES PRADEDANT DARBA NEPAMIRSKIT PALEISTI SERVERI !!!**",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30331880"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Get user by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed syntax and added proper checks for response data",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Id field is present and a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('id').that.is.a('number').and.is.at.least(0, \"Id should be a non-negative integer\");",
									"});",
									"",
									"pm.test(\"Email is a valid email format\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");",
									"});",
									"",
									"pm.test(\"Registered_on field is present and in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"   // pm.expect(responseData.registered_on).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"pm.expect(responseData.registered_on).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
									"});",
									"",
									"pm.test(\"Response body does not contain any additional unexpected fields\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(Object.keys(responseData)).to.have.lengthOf(4);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Base_URL}}/users/6",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"users",
								"6"
							]
						},
						"description": "[http://localhost:3000/api/users/{CIA_IRASYTI_USERIO_ID}](http://localhost:3000/api/v1/library/users/{CIA_IRASYTI_USERIO_ID})"
					},
					"response": []
				},
				{
					"name": "User login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Presence of 'message' and 'token' fields in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"    pm.expect(responseData.token).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message field is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Token field is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Description of the request is either 'login - gali buti arba username arba email' or 'password - slaptazodis'\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"    pm.expect(responseData.token).to.exist;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"tomas.sab@mail.com\",\r\n    \"password\": \"Tomas.Sab@123456,\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_URL}}/users/login",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"users",
								"login"
							]
						},
						"description": "1. login - gali buti arba username arba email\n    \n2. password - slaptazodis"
					},
					"response": []
				},
				{
					"name": "User registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.id).to.be.a('number');\r",
									"    pm.expect(responseData.id).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Username is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is in a valid email format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.email).to.match(/\\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}\\b/i, \"Email is not in a valid format\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Registered_on is in a valid date format\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  //pm.expect(responseData.registered_on).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
									"  pm.expect(responseData.registered_on).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//let random = Math.random().toString(36).substring(2);\r",
									"let random = Math.random().toString(36).substring(8);\r",
									" \r",
									" let UserName = \"tom.\" + random;\r",
									"\r",
									"let UserEmail = \"tom.\" + random + \"@mail.com\"; \r",
									"\r",
									"//let Password = random;\r",
									"\r",
									"pm.environment.set(\"UserName\", UserName);\r",
									"pm.environment.set(\"UserEmail\", UserEmail);\r",
									"//pm.environment.set(\"password\", Password);\r",
									"\r",
									"//++++++++++++++++++++++++++++++++++++\r",
									"\r",
									"// Define a function to generate a random password\r",
									"function generateRandomPassword(length) {\r",
									"   // const symbols = \"!@#$%^&*()_-+=<>?/{}[]|\";\r",
									"   // const symbols = \"?=.*[@$!%*?&~#^_+=\\-';,./|\":<>?]\";\"   *[@$!%?&~#^_+=\\/-';,.|\":<>]()  !@#$%^&*<>?/.,\";\r",
									"    const symbols = \"!@#$%^&*<>?/.,\";\r",
									"    let password = \"\";\r",
									"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\" + symbols;\r",
									"    const charactersLength = characters.length;\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        password += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"    }\r",
									"    return password;\r",
									"}\r",
									"\r",
									"// Set the length of the random password you want to generate\r",
									"const passwordLength = 20; // Change this to the desired length\r",
									"\r",
									"// Generate a random password\r",
									"const randomPassword = generateRandomPassword(passwordLength);\r",
									"\r",
									"// Set the generated password as an environment variable\r",
									"pm.environment.set(\"random_password\", randomPassword);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// {\r\n//     \"username\": \"USERNAME\",\r\n//     \"email\": \"E@gmail.com\",\r\n//     \"password\": \"PASSWORD\",\r\n//     \"repeatPassword\": \"PASSWORD\"\r\n// }\r\n\r\n// {\r\n//     \"username\": \"{{username}}\",\r\n//     \"email\": \"{{email}}\",\r\n//     \"password\": \"SlaptazodisWeb123.\",\r\n//     \"repeatPassword\": \"SlaptazodisWeb123.\"\r\n// }\r\n{\r\n    \"username\": \"{{UserName}}\",\r\n    \"email\": \"{{UserEmail}}\",\r\n    \"password\": \"{{random_password}}\",\r\n    \"repeatPassword\": \"{{random_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_URL}}/users/register",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"users",
								"register"
							]
						},
						"description": "1. username - vartotojo vardas\n    \n2. email - pastas\n    \n3. password - slaptazodis\n    \n4. repeatPassword - pakartonai slaptazodis"
					},
					"response": []
				}
			]
		},
		{
			"name": "Projects",
			"item": [
				{
					"name": "Create project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.be.a('number');\r",
									"    pm.expect(responseData.id).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Name and description must be non-empty strings\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
									"  pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status is a valid project status code\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.status).to.exist;\r",
									"    // Add more specific checks for valid project status codes if needed\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random alphanumeric string\r",
									"//let random = Math.random().toString(36).substring(2);\r",
									"let random = Math.random().toString(36).substring(8);\r",
									"\r",
									"// Define the word \"Test\"\r",
									"let word = \"Test-\";\r",
									"\r",
									"// Add numbers to the word \"Test\"\r",
									"let wordWithNumbers = word + random;\r",
									"\r",
									"console.log(wordWithNumbers);\r",
									"\r",
									"// Set the concatenated string as an environment variable named \"name\"\r",
									"pm.environment.set(\"ProjectName\", wordWithNumbers);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// {\r\n//     \"name\":\"Test33\",\r\n//     \"description\":\"Secont sprint\"\r\n// }\r\n{\r\n    \"name\":\"{{ProjectName}}\",\r\n    \"description\":\"Secont sprint\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_URL}}/projects/",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"projects",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tasks",
			"item": [
				{
					"name": "Create task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Content-Type header is present in the response\", function () {",
									"    pm.expect(pm.response.headers.has(\"Content-Type\")).to.be.true;",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header value is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Id field is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Created on and planned end date are in valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"  //  pm.expect(responseData.created_on).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"     pm.expect(responseData.created_on).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
									"    //pm.expect(responseData.planned_end_date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"    pm.expect(responseData.planned_end_date).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random task name\r",
									"const taskName = \"Task \" + Math.floor(Math.random() * 1000);\r",
									"\r",
									"// Generate a random task description\r",
									"const taskDescription = \"Description for Task \" + Math.floor(Math.random() * 1000);\r",
									"\r",
									"// Set the generated task name and description as environment variables\r",
									"pm.environment.set(\"TaskName\", taskName);\r",
									"pm.environment.set(\"TaskDescription\", taskDescription);\r",
									"\r",
									"//+++++++++++++++++++++++++++++++++++\r",
									"// Set the project_id variable if it's not already set\r",
									"if (!pm.environment.has(\"project_id\")) {\r",
									"    const projectIds = Array.from({length: 101}, (_, i) => i); // Generate an array from 0 to 100\r",
									"    pm.environment.set(\"project_id\", projectIds); // Set to the default array if not set\r",
									"}\r",
									"\r",
									"//+++++++++++++++++++++++++++++++++++++\r",
									"// Calculate the future date (e.g., 7 days from today)\r",
									"const futureDate = new Date();\r",
									"futureDate.setDate(futureDate.getDate() + 7);\r",
									"\r",
									"// Format the future date as YYYY-MM-DD\r",
									"const formattedDate = futureDate.toISOString().slice(0, 10);\r",
									"\r",
									"// Set the formatted date as the TaskEndDate variable\r",
									"pm.environment.set(\"TaskEndDate\", formattedDate);\r",
									"//+++++++++++++++++++++++++++++++++++++++"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// {\r\n//     \"name\": \"\",\r\n//     \"description\": \"\",\r\n//     \"project_id\": 0,\r\n//     \"planned_end_date\": \"\"\r\n// }\r\n{\r\n    \"name\": \"{{TaskName}}\",\r\n    \"description\": \"{{TaskDescription}}\",\r\n    \"project_id\": \"{{project_id}}\",\r\n    \"planned_end_date\": \"{{TaskEndDate}}\"\r\n}\r\n// {\r\n//     \"id\": \"1\",\r\n//     \"name\": \"Test1\",\r\n//     \"description\": \"Description1\",\r\n//     \"project_id\": \"1\",\r\n//     \"worker_id\": \"1\",\r\n//     \"created_on\": \"2024-04-30\",\r\n//     \"planned_end_date\": \"2024-05-12\",\r\n//     \"status\": \"Todo\"\r\n// }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_URL}}/tasks/",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"tasks",
								""
							]
						},
						"description": "name - tasko pavadinimas\n\ndescription - tasko aprasymas\n\nproject_id - projekto id, kuriam priklausys sitas taskas\n\nplanned_end_date - tasko atlikimo numatoma data"
					},
					"response": []
				},
				{
					"name": "Get tasks by project id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Created_on and planned_end_date are in valid date format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    responseData.forEach(function(task) {\r",
									"        //pm.expect(task.created_on).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
									"       // pm.expect(task.planned_end_date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
									"        pm.expect(task.created_on).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
									"        pm.expect(task.planned_end_date).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
									"        \r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range - Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should be an array of objects\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(task) {\r",
									"        pm.expect(task).to.be.an('object');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Base_URL}}/tasks/project/4",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"tasks",
								"project",
								"4"
							]
						},
						"description": "[http://localhost:3000/api/tasks/project/{PROJEKTO_ID}](http://localhost:3000/api/tasks/project/{PROJEKTO_ID})\n\nGrazina visus projekto taskus"
					},
					"response": []
				},
				{
					"name": "Get tasks by user id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(task => {",
									"        pm.expect(task.id).to.be.a('number').and.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Project_id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(task => {",
									"        pm.expect(task.project_id).to.be.a('number').and.satisfy(projectId => projectId >= 0, \"Project_id should be a non-negative integer\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"",
									"pm.test(\"Created_on and planned_end_date fields are in valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(task) {",
									"        // pm.expect(task.created_on).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"        // pm.expect(task.planned_end_date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"        pm.expect(task.created_on).to.match( /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
									"        pm.expect(task.planned_end_date).to.match( /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
									"",
									"       ",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Status field should be one of the expected values\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach(task => {",
									"        pm.expect(task.status).to.be.oneOf([\"to do\", \"pending\", \"in progress\", \"completed\"]);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Worker username is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(task) {",
									"    pm.expect(task.worker_username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Worker username should not be empty\");",
									"  });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//{{Base_URL}}/tasks/user/2\r",
									"\r",
									"//++++++++++++++++++++++++++++++++\r",
									"\r",
									"// // Generate an array of user IDs from 0 to 100\r",
									"// const userIds = Array.from({length: 101}, (_, i) => i);\r",
									"\r",
									"// // Set the array of user IDs as an environment variable\r",
									"// pm.environment.set(\"user_ids\", userIds);\r",
									"\r",
									"\r",
									"//+++++++++++++++++++++++++++++++\r",
									"//{{Base_URL}}/tasks/user/\r",
									"//DONT FORGET. IF YOU HAVE ONLY ONE USER IT TAKES LONGER WAIT!!!\r",
									"// Define the base URL\r",
									"const baseURL = pm.variables.get(\"Base_URL\");\r",
									"\r",
									"// Generate a random user ID between 0 and 10\r",
									"const randomUserID = Math.floor(Math.random() * 11); // Generates a random number between 0 and 10 (inclusive)\r",
									"\r",
									"// Set the request URL with the random user ID\r",
									"pm.request.url = `${baseURL}/tasks/user/${randomUserID}`;\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_URL}}/tasks/user/",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"tasks",
								"user",
								""
							]
						},
						"description": "[http://localhost:3000/api/tasks/user/{USER_ID}](http://localhost:3000/api/tasks/project/{PROJEKTO_ID})\n\nGrazina visus taskus, prie kuriu yra pridetas vartotojas"
					},
					"response": []
				},
				{
					"name": "Update task",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// // Define the base URL\r",
									"// const baseURL = pm.variables.get(\"Base_URL\");\r",
									"\r",
									"// // Initialize variables with default values\r",
									"// let id = 22;\r",
									"// let name = \"\";\r",
									"// let description = \"\";\r",
									"// let status = \"\";\r",
									"// let project_id = 2;\r",
									"// let created_on = \"\";\r",
									"// let planned_end_date = \"\";\r",
									"// let worker_id = 3;\r",
									"\r",
									"// // Check if request body exists and is in JSON format\r",
									"// if (pm.request.body && pm.request.body.toJSON) {\r",
									"//     // Extract values from the request body\r",
									"//     const requestBody = pm.request.body.toJSON();\r",
									"//     id = requestBody.id || id;\r",
									"//     name = requestBody.name || name;\r",
									"//     description = requestBody.description || description;\r",
									"//     status = requestBody.status || status;\r",
									"//     project_id = requestBody.project_id || project_id;\r",
									"//     created_on = requestBody.created_on || created_on;\r",
									"//     planned_end_date = requestBody.planned_end_date || planned_end_date;\r",
									"//     worker_id = requestBody.worker_id || worker_id;\r",
									"// }\r",
									"\r",
									"// // Generate random values for fields if the placeholder is present, otherwise use the provided value\r",
									"// const PUTrandomTaskName = Math.random().toString(36).substring(2); // Generate random task name\r",
									"// const PUTrandomDescription = Math.random().toString(36).substring(2); // Generate random description\r",
									"// const statusOptions = [\"to do\", \"in progress\", \"completed\"];\r",
									"// const PUTrandomStatus = status || statusOptions[Math.floor(Math.random() * statusOptions.length)]; // Randomly select a status\r",
									"// const PUTrandomCreatedOn = new Date(new Date().getTime() - Math.floor(Math.random() * 1000 * 3600 * 24 * 30)).toISOString(); // Generate random created_on date within the last 30 days\r",
									"// const PUTrandomPlannedEndDate = new Date(new Date().getTime() + Math.floor(Math.random() * 1000 * 3600 * 24 * 30)).toISOString(); // Generate random planned_end_date within the next 30 days\r",
									"\r",
									"// // Update the fields in the request body with the generated values\r",
									"// pm.request.body.update({\r",
									"//     \"id\": id,\r",
									"//     \"name\": name || PUTrandomTaskName,\r",
									"//     \"description\": description || PUTrandomDescription,\r",
									"//     \"status\": PUTrandomStatus,\r",
									"//     \"project_id\": project_id,\r",
									"//     \"created_on\": created_on || PUTrandomCreatedOn,\r",
									"//     \"planned_end_date\": planned_end_date || PUTrandomPlannedEndDate,\r",
									"//     \"worker_id\": worker_id\r",
									"// });\r",
									"\r",
									"// // Set the request URL\r",
									"// pm.request.url = `${baseURL}/tasks/`;\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has all the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData).to.include.all.keys('id', 'name', 'description', 'project_id', 'created_on', 'planned_end_date', 'status');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Created_on date is in valid format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.created_on).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status field is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.have.property('status').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Status field should be a non-empty string\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Worker_id field is present and is either null or a positive integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"\r",
									"    // Check if worker_id field exists in the response\r",
									"    if ('worker_id' in responseData) {\r",
									"        if (responseData.worker_id !== null) {\r",
									"            pm.expect(responseData.worker_id).to.be.a('number');\r",
									"            pm.expect(responseData.worker_id).to.satisfy((val) => val >= 0, \"Worker_id should be a positive integer\");\r",
									"        }\r",
									"    } else {\r",
									"        pm.expect(responseData).to.not.have.property('worker_id');\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// {\r\n//     \"id\": 0,\r\n//     \"name\": \"\",\r\n//     \"description\": \"\",\r\n//     \"status\": \"\",\r\n//     \"project_id\": 0,\r\n//     \"created_on\": \"\",\r\n//     \"planned_end_date\": \"\",\r\n//     \"worker_id\": 0\r\n// }\r\n\r\n{\r\n    \"id\": 22,\r\n    \"name\": \"Task 630\",\r\n    \"description\": \"Description for Task 353\",\r\n    \"status\": \"to do\",\r\n    \"project_id\": 2,\r\n    \"created_on\": \"2024-05-02\",\r\n    \"planned_end_date\": \"2024-05-09\",\r\n    \"worker_id\": 3\r\n}\r\n\r\n// {\r\n//     \"id\": 22,\r\n//     \"name\": \"{{PUTrandomTaskName}}\",\r\n//     \"description\": \"{{PUTrandomDescription}}\",\r\n//     \"status\": \"{{PUTrandomStatus}}\",\r\n//     \"project_id\": 2,\r\n//     \"created_on\": \"{{PUTrandomCreatedOn}}\",\r\n//     \"planned_end_date\": \"{{PUTrandomPlannedEndDate}}\",\r\n//     \"worker_id\": 3\r\n// }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_URL}}/tasks/",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"tasks",
								""
							]
						},
						"description": "id - tasko id\n\nname - tasko pavadinimas\n\ndescription - tasko aprasymas\n\nstatus - tasko statusas\n\nproject_id - projekto id, kuriam priklausys sitas taskas\n\ncreated_on - data, kada taskas buvo sukurtas\n\nplanned_end_date - tasko atlikimo numatoma data\n\nworker_id - userio id, kuris bus priskirtas prie sio tasko"
					},
					"response": []
				},
				{
					"name": "Update task status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// {\r\n//     \"id\": 0,\r\n//     \"status\": \"\"\r\n// }\r\n\r\n//Turetu but to do , in progress ir done\r\n\r\n{\r\n    \"id\": 21,\r\n    \"status\": \"done\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_URL}}/tasks/status",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"tasks",
								"status"
							]
						},
						"description": "id - tasko id\n\nstatus - tasko statusas"
					},
					"response": []
				},
				{
					"name": "Delete task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{Base_URL}}/tasks/5",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"tasks",
								"5"
							]
						},
						"description": "[http://localhost:3000/api/tasks/{TASKO_ID}](http://localhost:3000/api/tasks/project/{PROJEKTO_ID})\n\nIstrina taska su duotu id"
					},
					"response": []
				},
				{
					"name": "Update task worker",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// {\r\n//     \"id\":0,\r\n//     \"worker_id\":0\r\n// }\r\n\r\n{\r\n    \"id\":10,\r\n    \"worker_id\":13\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_URL}}/tasks/worker",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"tasks",
								"worker"
							]
						},
						"description": "id - tasko id\n\nworker_id - userio id, kuris bus priskirtas prie tasko"
					},
					"response": []
				}
			],
			"description": "Aplankas su visais requestais susijusiais su taskais\n\n!!! VISI REIKALAUJA JWT TOKENO !!!\n\nPrivilegijos pagal roles:\n\nuser{\n\n1. Get tasks by project id\n2. Get tasks by user id\n3. Update task status\n    \n\n}\n\nadmin & owner{\n\n1. Viskas\n    \n\n}"
		},
		{
			"name": "ProjectWorkers",
			"item": [
				{
					"name": "Get project worker by user and project id",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/pworkers/2/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"pworkers",
								"2",
								"1"
							]
						},
						"description": "http://localhost:3000/api/pworkers/{USER_ID}/{PROJECT_ID}\n\ngrazina project workeri su duotais userio ir projekto id"
					},
					"response": []
				},
				{
					"name": "Get project workers by user id",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/pworkers/user/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"pworkers",
								"user",
								"2"
							]
						},
						"description": "http://localhost:3000/api/pworkers/user/{USER_ID}  \n\nGrazina visus project workerius su duotu user_id t.y.\n\nGrazina visu projektu id ir userio roles tuose projektuose"
					},
					"response": []
				},
				{
					"name": "Get project workers by project id",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/pworkers/project/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"pworkers",
								"project",
								"2"
							]
						},
						"description": "http://localhost:3000/api/pworkers/project/{PROJECT_ID}\n\nGrazina visus project workerius kur sutampa project id t.y.\n\nGrazina visu useriu id ir ju roles tam projekte"
					},
					"response": []
				},
				{
					"name": "Update project worker",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": 0,\r\n    \"project_id\": 0,\r\n    \"role\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/pworkers/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"pworkers",
								""
							]
						},
						"description": "Atnaujina userio role\n\nuser_id - userio id\n\nproject_id - projekto id\n\nrole - duoto userio duotam projekte role"
					},
					"response": []
				},
				{
					"name": "Delete project worker",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": 0,\r\n    \"project_id\":0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/pworkers/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"pworkers",
								""
							]
						},
						"description": "Istrina useri is projekto\n\nuser_id - userio id\n\nprojekto_id - projekto id"
					},
					"response": []
				},
				{
					"name": "Create project worker",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": 0,\r\n    \"project_id\":0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/pworkers/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"pworkers",
								""
							]
						},
						"description": "Prideda useri prie projekto\n\nuser_id - user id\n\nproject_id - projekto id"
					},
					"response": []
				}
			],
			"description": "Aplankas su visais requestais susijusiais su project workeriais\n\n!!! VISI REIKALAUJA JWT TOKENO !!!\n\nPrivilegijos pagal roles:\n\nuser{\n\n1. Get project worker by user and project id\n    \n2. Get project workers by user id\n    \n3. Get project worker by project id\n    \n\n}\n\nadmin & owner{\n\nViskas\n\n}"
		}
	]
}