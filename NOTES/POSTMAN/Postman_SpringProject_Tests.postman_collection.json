{
	"info": {
		"_postman_id": "c58820f7-cfae-422a-93cd-16a9debb3777",
		"name": "Postman_SpringProject_Tests",
		"description": "**!!! PRIES PRADEDANT DARBA NEPAMIRSKIT PALEISTI SERVERI !!!**",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30366855",
		"_collection_link": "https://santamonicatechpioneers.postman.co/workspace/SantaMonicaTechPioneers_Project~1a800a43-3fd5-44b6-8f7e-92bd45c126c3/collection/30366855-c58820f7-cfae-422a-93cd-16a9debb3777?action=share&source=collection_link&creator=30366855"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "User registration",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"Laima\",\r\n    \"email\": \"laima@gmail.com\",\r\n    \"password\": \"Laima@gmail.com1\",\r\n    \"repeatPassword\": \"Laima@gmail.com1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/users/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"register"
							]
						},
						"description": "1. username - vartotojo vardas\n    \n2. email - pastas\n    \n3. password - slaptazodis\n    \n4. repeatPassword - pakartonai slaptazodis"
					},
					"response": []
				},
				{
					"name": "User registration generator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.id).to.be.a('number');\r",
									"    pm.expect(responseData.id).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Username is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is in a valid email format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.email).to.match(/\\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}\\b/i, \"Email is not in a valid format\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Registered_on is in a valid date format\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  //pm.expect(responseData.registered_on).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
									"  pm.expect(responseData.registered_on).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//let random = Math.random().toString(36).substring(2);\r",
									"let random = Math.random().toString(36).substring(8);\r",
									" \r",
									" let UserName = \"tom.\" + random;\r",
									"\r",
									"let UserEmail = \"tom.\" + random + \"@mail.com\"; \r",
									"\r",
									"//let Password = random;\r",
									"\r",
									"pm.environment.set(\"UserName\", UserName);\r",
									"pm.environment.set(\"UserEmail\", UserEmail);\r",
									"//pm.environment.set(\"password\", Password);\r",
									"\r",
									"//++++++++++++++++++++++++++++++++++++\r",
									"\r",
									"// Define a function to generate a random password\r",
									"function generateRandomPassword(length) {\r",
									"   // const symbols = \"!@#$%^&*()_-+=<>?/{}[]|\";\r",
									"   // const symbols = \"?=.*[@$!%*?&~#^_+=\\-';,./|\":<>?]\";\"   *[@$!%?&~#^_+=\\/-';,.|\":<>]()  !@#$%^&*<>?/.,\";\r",
									"    const symbols = \"!@#$%^&*<>?/.,\";\r",
									"    let password = \"\";\r",
									"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\" + symbols;\r",
									"    const charactersLength = characters.length;\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        password += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"    }\r",
									"    return password;\r",
									"}\r",
									"\r",
									"// Set the length of the random password you want to generate\r",
									"const passwordLength = 20; // Change this to the desired length\r",
									"\r",
									"// Generate a random password\r",
									"const randomPassword = generateRandomPassword(passwordLength);\r",
									"\r",
									"// Set the generated password as an environment variable\r",
									"pm.environment.set(\"random_password\", randomPassword);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// {\r\n//     \"username\": \"USERNAME\",\r\n//     \"email\": \"E@gmail.com\",\r\n//     \"password\": \"PASSWORD\",\r\n//     \"repeatPassword\": \"PASSWORD\"\r\n// }\r\n\r\n// {\r\n//     \"username\": \"{{username}}\",\r\n//     \"email\": \"{{email}}\",\r\n//     \"password\": \"SlaptazodisWeb123.\",\r\n//     \"repeatPassword\": \"SlaptazodisWeb123.\"\r\n// }\r\n{\r\n    \"username\": \"{{UserName}}\",\r\n    \"email\": \"{{UserEmail}}\",\r\n    \"password\": \"{{random_password}}\",\r\n    \"repeatPassword\": \"{{random_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_URL}}/users/register",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"users",
								"register"
							]
						},
						"description": "1. username - vartotojo vardas\n    \n2. email - pastas\n    \n3. password - slaptazodis\n    \n4. repeatPassword - pakartonai slaptazodis"
					},
					"response": []
				},
				{
					"name": "Get user by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed syntax and added proper checks for response data",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Id field is present and a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('id').that.is.a('number').and.is.at.least(0, \"Id should be a non-negative integer\");",
									"});",
									"",
									"pm.test(\"Email is a valid email format\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");",
									"});",
									"",
									"pm.test(\"Registered_on field is present and in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"   // pm.expect(responseData.registered_on).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"pm.expect(responseData.registered_on).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
									"});",
									"",
									"pm.test(\"Response body does not contain any additional unexpected fields\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(Object.keys(responseData)).to.have.lengthOf(4);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_URL}}/users/13",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"users",
								"13"
							]
						},
						"description": "[http://localhost:3000/api/users/{CIA_IRASYTI_USERIO_ID}](http://localhost:3000/api/v1/library/users/{CIA_IRASYTI_USERIO_ID})"
					},
					"response": []
				},
				{
					"name": "User login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Assuming the response JSON is stored in responseData variable\r",
									"const responseData = pm.response.json();\r",
									" \r",
									"// Extract the token from the response\r",
									"const token = responseData.token;\r",
									" \r",
									"// Set the token value to the variable\r",
									"pm.environment.set(\"token\", token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"Dainora\",\r\n    \"password\": \"Dainora@gmail.com1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/users/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search usernames",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/users/?search=Dainora",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								""
							],
							"query": [
								{
									"key": "search",
									"value": "Dainora"
								}
							]
						},
						"description": "Iesko username kurie prasideda su duotu search query. Case sensitive.\n\nGrazina maximum top 20 username'u duomenu bazeje"
					},
					"response": []
				}
			]
		},
		{
			"name": "Projects",
			"item": [
				{
					"name": "Create project",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Postman tasks project_for_deleting Dainora \",\r\n    \"description\":\"Find workers \"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/projects/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"projects",
								""
							]
						},
						"description": "Sukuria projekta, tai gali padarytas bet koks autentifikuotas vartotojas\n\nname - projekto pavadinimas\n\ndescription -projekto aprasymas"
					},
					"response": []
				},
				{
					"name": "Get project by id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/projects/13",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"projects",
								"13"
							]
						},
						"description": "Gauna jau egzistuojanti projekta\n\n[http://localhost:3000/api/projects/{Projekto_ID}](https://StartFragmenthttp://localhost:3000/api/projects/{Projekto)\n\nProjekto_id - projekto id duomenu bazeje"
					},
					"response": []
				},
				{
					"name": "Update project",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 6,\r\n    \"name\":\"Postman project 4_Karolis\",\r\n    \"description\":\"Find worker\",\r\n    \"status\": \"ongoing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/projects/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"projects",
								""
							]
						},
						"description": "Atnaujina jau egzisuotjanti projekta\n\nid - projekto id duomenu bazeje\n\nname - projekto pavadinimas\n\ndescription -projekto aprasymas\n\nstatus - projekto busena, gali buti: ongoing arba done"
					},
					"response": []
				},
				{
					"name": "Get my projects",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/projects/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"projects",
								""
							]
						},
						"description": "Gauna visus projektus prie kuriu yra pridetas prisijunges vartotojas\n\n[http://localhost:3000/api/projects/{Projekto_ID}](https://StartFragmenthttp://localhost:3000/api/projects/{Projekto)\n\nProjekto_id - projekto id duomenu bazeje"
					},
					"response": []
				},
				{
					"name": "Delete project",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/projects/16",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"projects",
								"16"
							]
						},
						"description": "Istrina jau egzistuojanti projekta\n\n[http://localhost:3000/api/projects/{Projekto_ID}](https://StartFragmenthttp://localhost:3000/api/projects/{Projekto)\n\nProjekto_id - projekto id duomenu bazeje"
					},
					"response": []
				},
				{
					"name": "Search projects",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/projects/1?search=\"Dainora\"",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"projects",
								"1"
							],
							"query": [
								{
									"key": "search",
									"value": "\"Dainora\"",
									"description": "Query for project search by name or description "
								}
							]
						},
						"description": "Iesko projektus, kuriu pavadinime arba aprasyme yra duotas search tekstas. NOT Case sensitive.\n\nVeikia paginacijos budu. Viename puslapyje grazina 20 projektu maximum. Paginacijos indexas prasideda nuo 1."
					},
					"response": []
				}
			]
		},
		{
			"name": "Tasks",
			"item": [
				{
					"name": "Create task",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Postman tasks project2 Gerda\",\r\n    \"description\": \"Delete worker again\",\r\n    \"project_id\": 14,\r\n    \"planned_end_date\": \"2024-05-23\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/tasks/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"tasks",
								""
							]
						},
						"description": "name - tasko pavadinimas\n\ndescription - tasko aprasymas\n\nproject_id - projekto id, kuriam priklausys sitas taskas\n\nplanned_end_date - tasko atlikimo numatoma data"
					},
					"response": []
				},
				{
					"name": "Get tasks by project id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Created_on and planned_end_date are in valid date format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    responseData.forEach(function(task) {\r",
									"        //pm.expect(task.created_on).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
									"       // pm.expect(task.planned_end_date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
									"        pm.expect(task.created_on).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
									"        pm.expect(task.planned_end_date).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
									"        \r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range - Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should be an array of objects\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(task) {\r",
									"        pm.expect(task).to.be.an('object');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_URL}}/tasks/project/13",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"tasks",
								"project",
								"13"
							]
						},
						"description": "[http://localhost:3000/api/tasks/project/{PROJEKTO_ID}](http://localhost:3000/api/tasks/project/{PROJEKTO_ID})\n\nGrazina visus projekto taskus"
					},
					"response": []
				},
				{
					"name": "Get tasks by user id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(task => {",
									"        pm.expect(task.id).to.be.a('number').and.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Project_id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(task => {",
									"        pm.expect(task.project_id).to.be.a('number').and.satisfy(projectId => projectId >= 0, \"Project_id should be a non-negative integer\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"",
									"pm.test(\"Created_on and planned_end_date fields are in valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(task) {",
									"        // pm.expect(task.created_on).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"        // pm.expect(task.planned_end_date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"        pm.expect(task.created_on).to.match( /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
									"        pm.expect(task.planned_end_date).to.match( /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
									"",
									"       ",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Status field should be one of the expected values\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach(task => {",
									"        pm.expect(task.status).to.be.oneOf([\"to do\", \"pending\", \"in progress\", \"completed\"]);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Worker username is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(task) {",
									"    pm.expect(task.worker_username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Worker username should not be empty\");",
									"  });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//{{Base_URL}}/tasks/user/2\r",
									"\r",
									"//++++++++++++++++++++++++++++++++\r",
									"\r",
									"// // Generate an array of user IDs from 0 to 100\r",
									"// const userIds = Array.from({length: 101}, (_, i) => i);\r",
									"\r",
									"// // Set the array of user IDs as an environment variable\r",
									"// pm.environment.set(\"user_ids\", userIds);\r",
									"\r",
									"\r",
									"//+++++++++++++++++++++++++++++++\r",
									"//{{Base_URL}}/tasks/user/\r",
									"//DONT FORGET. IF YOU HAVE ONLY ONE USER IT TAKES LONGER WAIT!!!\r",
									"// Define the base URL\r",
									"const baseURL = pm.variables.get(\"Base_URL\");\r",
									"\r",
									"// Generate a random user ID between 0 and 10\r",
									"const randomUserID = Math.floor(Math.random() * 11); // Generates a random number between 0 and 10 (inclusive)\r",
									"\r",
									"// Set the request URL with the random user ID\r",
									"pm.request.url = `${baseURL}/tasks/user/${randomUserID}`;\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_URL}}/tasks/user/10",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"tasks",
								"user",
								"10"
							]
						},
						"description": "[http://localhost:3000/api/tasks/user/{USER_ID}](http://localhost:3000/api/tasks/project/{PROJEKTO_ID})\n\nGrazina visus taskus, prie kuriu yra pridetas vartotojas"
					},
					"response": []
				},
				{
					"name": "Update task",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":14,\r\n    \"name\": \"Postman project to find worker\",\r\n    \"description\": \"do task as a worker\",\r\n    \"status\": \"done\",\r\n    \"project_id\": 14,\r\n    \"planned_end_date\": \"2024-05-24\",\r\n    \"worker_username\": \"Vaida\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/tasks/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"tasks",
								""
							]
						},
						"description": "id - tasko id\n\nname - tasko pavadinimas\n\ndescription - tasko aprasymas\n\nstatus - tasko statusas\n\nproject_id - projekto id, kuriam priklausys sitas taskas\n\nplanned_end_date - tasko atlikimo numatoma data\n\nworker_username - userio username, kuris bus priskirtas prie sio tasko"
					},
					"response": []
				},
				{
					"name": "Update task status (update only worker)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 16,\r\n    \"status\": \"in progress\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/tasks/status",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"tasks",
								"status"
							]
						},
						"description": "id - tasko id\n\nstatus - tasko statusas"
					},
					"response": []
				},
				{
					"name": "Delete task",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/tasks/16",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"tasks",
								"16"
							]
						},
						"description": "[http://localhost:3000/api/tasks/{TASKO_ID}](http://localhost:3000/api/tasks/project/{PROJEKTO_ID})\n\nIstrina taska su duotu id"
					},
					"response": []
				}
			],
			"description": "Aplankas su visais requestais susijusiais su taskais\n\n!!! VISI REIKALAUJA JWT TOKENO !!!\n\nPrivilegijos pagal roles:\n\nuser{\n\n1. Get tasks by project id\n2. Get tasks by user id\n3. Update task status\n    \n\n}\n\nadmin & owner{\n\n1. Viskas\n    \n\n}"
		},
		{
			"name": "ProjectWorkers",
			"item": [
				{
					"name": "Create project worker",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"User_id, project_id, and role fields exist in the response\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.user_id).to.exist;",
									"  pm.expect(responseData.project_id).to.exist;",
									"  pm.expect(responseData.role).to.exist;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"Pranciškus\",\r\n    \"project_id\":14\r\n    \r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/pworkers/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"pworkers",
								""
							]
						},
						"description": "Prideda useri prie projekto\n\nuser_id - user id\n\nproject_id - projekto id"
					},
					"response": []
				},
				{
					"name": "Get project worker by user and project id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/pworkers/10/13",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"pworkers",
								"10",
								"13"
							]
						},
						"description": "http://localhost:3000/api/pworkers/{USER_ID}/{PROJECT_ID}\n\ngrazina project workeri su duotais userio ir projekto id"
					},
					"response": []
				},
				{
					"name": "Get project workers by user id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/pworkers/user/12",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"pworkers",
								"user",
								"12"
							]
						},
						"description": "http://localhost:3000/api/pworkers/user/{USER_ID}  \n\nGrazina visus project workerius su duotu user_id t.y.\n\nGrazina visu projektu id ir userio roles tuose projektuose"
					},
					"response": []
				},
				{
					"name": "Get project workers by project id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/pworkers/project/14",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"pworkers",
								"project",
								"14"
							]
						},
						"description": "http://localhost:3000/api/pworkers/project/{PROJECT_ID}\n\nGrazina visus project workerius kur sutampa project id t.y.\n\nGrazina visu useriu id ir ju roles tam projekte"
					},
					"response": []
				},
				{
					"name": "Update project worker  (as owner and admin)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": 11,\r\n    \"project_id\": 14,\r\n    \"role\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/pworkers/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"pworkers",
								""
							]
						},
						"description": "Atnaujina userio role\n\nuser_id - userio id\n\nproject_id - projekto id\n\nrole - duoto userio duotam projekte role"
					},
					"response": []
				},
				{
					"name": "Delete project worker",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": 12,\r\n    \"project_id\":14\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/pworkers/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"pworkers",
								""
							]
						},
						"description": "Istrina useri is projekto\n\nuser_id - userio id\n\nprojekto_id - projekto id"
					},
					"response": []
				}
			],
			"description": "Aplankas su visais requestais susijusiais su project workeriais\n\n!!! VISI REIKALAUJA JWT TOKENO !!!\n\nPrivilegijos pagal roles:\n\nuser{\n\n1. Get project worker by user and project id\n    \n2. Get project workers by user id\n    \n3. Get project worker by project id\n    \n\n}\n\nadmin & owner{\n\nViskas\n\n}"
		}
	]
}